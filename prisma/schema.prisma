// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  password    String
  name        String
  role        Role     @default(FARMER)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  images      Image[]
  
  @@map("users")
}

model Image {
  id             Int      @id @default(autoincrement())
  filename       String
  originalName   String
  mimetype       String
  size           Int
  path           String
  uploadedAt     DateTime @default(now())
  
  // Image metadata
  width          Int?
  height         Int?
  gpsLatitude    Float?
  gpsLongitude   Float?
  capturedAt     DateTime?
  
  // Relations
  userId         Int
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  predictions    Prediction[]
  
  @@map("images")
}

model Disease {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  scientificName String?
  description String?
  symptoms    String[]
  causes      String[]
  treatment   String?
  prevention  String?
  severity    Severity @default(MEDIUM)
  crops       String[] // Which crops this disease affects
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  predictions Prediction[]
  
  @@map("diseases")
}

model Prediction {
  id          Int      @id @default(autoincrement())
  confidence  Float
  isHealthy   Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  // Additional prediction data
  boundingBox Json?    // For object detection
  affectedArea Float?  // Percentage of affected area
  
  // Relations
  imageId     Int
  image       Image   @relation(fields: [imageId], references: [id], onDelete: Cascade)
  diseaseId   Int?
  disease     Disease? @relation(fields: [diseaseId], references: [id])
  
  @@map("predictions")
}

enum Role {
  ADMIN
  FARMER
  RESEARCHER
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}